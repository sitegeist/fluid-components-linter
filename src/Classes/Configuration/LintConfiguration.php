<?php
declare(strict_types=1);

namespace Sitegeist\FluidComponentsLinter\Configuration;

use Sitegeist\FluidComponentsLinter\CodeQuality\Issue\IssueInterface;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

class LintConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder()
    {
        $treeBuilder = new TreeBuilder('fclint');
        /** @var TreeNode */
        $fclint = $treeBuilder->getRootNode();

        $fclint->children()
            ->arrayNode('_patterns')
                ->scalarPrototype()->end()
                ->performNoDeepMerging()
            ->end()
            ->arrayNode('component')
                ->children()
                    ->arrayNode('requireDocumentation')
                        ->children()
                            ->booleanNode('check')->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('requireStrictComponentStructure')
                        ->children()
                            ->booleanNode('check')->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('requireFixtureFile')
                        ->children()
                            ->booleanNode('check')->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('requireDocumentationWithFixtureFile')
                        ->children()
                            ->booleanNode('check')->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
            ->arrayNode('params')
                ->children()
                    ->arrayNode('count')
                        ->children()
                            ->integerNode('max')->end()
                            ->integerNode('min')->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('extraNamingConventionsPerType')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('typeValue')->end()
                                ->arrayNode('namingConventions')
                                    ->scalarPrototype()->end()
                                    ->performNoDeepMerging()
                                ->end()
                                ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                            ->end()
                        ->end()
                        ->useAttributeAsKey('typeValue', false)
                    ->end()
                    ->arrayNode('nameLength')
                        ->children()
                            ->integerNode('max')->end()
                            ->integerNode('min')->end()
                            ->arrayNode('allowed')
                                ->scalarPrototype()->end()
                                ->performNoDeepMerging()
                            ->end()
                            ->arrayNode('denied')
                                ->scalarPrototype()->end()
                                ->performNoDeepMerging()
                            ->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('generalNamingConventions')
                        ->children()
                            ->arrayNode('namingConventions')
                                ->scalarPrototype()->end()
                                ->performNoDeepMerging()
                            ->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('requireDescription')
                        ->children()
                            ->booleanNode('check')->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('requireDescriptionForType')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('typeValue')->end()
                                ->booleanNode('requireDescription')->end()
                                ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                            ->end()
                        ->end()
                        ->useAttributeAsKey('typeValue', false)
                    ->end()
                    ->arrayNode('requireNamespaceWithoutLeadingSlash')
                    ->children()
                        ->booleanNode('check')->end()
                        ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                    ->end()
                    ->end()
                    ->arrayNode('typeHints')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('namePattern')->end()
                                ->scalarNode('typeHint')->end()
                                ->scalarNode('message')->end()
                                ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                            ->end()
                        ->end()
                        ->useAttributeAsKey('namePattern', false)
                    ->end()
                    ->arrayNode('typeRestrictions')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('typeValue')->end()
                                ->scalarNode('typeRecommendation')->end()
                                ->scalarNode('message')->end()
                                ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                            ->end()
                        ->end()
                        ->useAttributeAsKey('typeValue', false)
                    ->end()
                ->end()
                ->ignoreExtraKeys()
            ->end()
            ->arrayNode('renderer')
                ->children()
                    ->arrayNode('requireClass')
                        ->children()
                            ->booleanNode('check')->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('requireComponentPrefixer')
                        ->children()
                            ->booleanNode('check')->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('requireRawContent')
                        ->children()
                            ->booleanNode('check')->end()
                            ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                        ->end()
                    ->end()
                    ->arrayNode('viewHelperRestrictions')
                        ->arrayPrototype()
                            ->children()
                                ->scalarNode('viewHelperName')->end()
                                ->scalarNode('message')->end()
                                ->enumNode('severity')->values(IssueInterface::SEVERITIES)->end()
                            ->end()
                        ->end()
                        ->useAttributeAsKey('viewHelperName', false)
                    ->end()
                ->end()
            ->end();

        return $treeBuilder;
    }
}
